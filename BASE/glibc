Summary='Main C library'
Name='glibc'
Version='2.30'
Release='1'
License='GPLv2'
Url='http://www.gnu.org/software/libc'
Group='LFS/Base'
Source='http://ftp.gnu.org/gnu/glibc/glibc-2.30.tar.xz'
Patch='http://www.linuxfromscratch.org/patches/lfs/9.0/glibc-2.30-fhs-1.patch'
Description='This library provides the basic routines for allocating memory,
searching directories, opening and closing files, reading and
writing files, string handling, pattern matching, arithmetic, and so on.'

Prep="%setup -q _T -b 0 -n %{name}-%{version}
%patch0 -p1
mkdir -v build"

Build='cd build
CC="gcc -ffile-prefix-map=/tools=/usr" \
../configure --prefix=/usr \
	--disable-werror \
	--enable-kernel=3.2 \
	--enable-stack-protector=strong \
	--with-headers=/usr/include \
	libc_cv_slibdir=/lib \
	%{_system_type}
%{make_build}'

Install='cd build
make install_root=%{buildroot} install
#	Compatibility symlink for non ld-linux-armhf awareness
ln -sfv ld-2.30.so %{buildroot}/lib/ld-linux.so.3
#	Create directories
install -vdm 755 %{buildroot}/etc
install -vdm 755 %{buildroot}/sbin
#	Install the configuration file and runtime directory for nscd:
install -vDm 644 ../nscd/nscd.conf %{buildroot}/etc/nscd.conf
install -vdm 755 %{buildroot}/var/cache/nscd
#-----------------------------------------------------------------------------
#	6.9.2.1. Adding nsswitch.conf 
#-----------------------------------------------------------------------------	
cat > %{buildroot}/etc/nsswitch.conf <<- EOF
# Begin /etc/nsswitch.conf
	passwd: files
	group: files
	shadow: files

	hosts: files dns
	networks: files

	protocols: files
	services: files
	ethers: files
	rpc: files

# End /etc/nsswitch.conf
EOF
#-----------------------------------------------------------------------------
#	6.9.2.3. Configuring the Dynamic Loader
#-----------------------------------------------------------------------------
cat > %{buildroot}/etc/ld.so.conf <<- EOF
# Begin /etc/ld.so.conf
	/usr/local/lib
	/opt/lib
# Add an include directory
	include /etc/ld.so.conf.d/*.conf
EOF
#-----------------------------------------------------------------------------
#	Install locale generation script and config file
#-----------------------------------------------------------------------------
install -vdm 755 %{buildroot}/sbin
install -vdm 755 %{buildroot}/usr/lib/locale
cat > %{buildroot}/sbin/locale-gen << EOF
#!/bin/sh
set -o errexit	# exit if error...insurance ;)
set -o nounset	# exit if variable not initalized
set +h		# disable hashall
umask 022
LOCALEGEN=/etc/locale-gen.conf
LOCALES=/usr/share/i18n/locales
#-----------------------------------------------------------------------------
#	Common support functions
function _die {
	local _red="\\\033[1;31m"
	local _normal="\\\033[0;39m"
	[ -n "\$*" ] && printf "\${_red}\$*\${_normal}\n"
	false
	exit 1
}
function _msg {
	printf "%s\n" "\${1}"
	return
}
function _msg_line {
	printf "%s" "\${1}"
	return
}
function _msg_failure {
	local _red="\\\033[1;31m"
	local _normal="\\\033[0;39m"
	printf "\${_red}%s\${_normal}\n" "FAILURE"
	exit 2
}
function _msg_success {
	local _green="\\\033[1;32m"
	local _normal="\\\033[0;39m"
	printf "\${_green}%s\${_normal}\n" "SUCCESS"
	return
}
function _msg_log {
	printf "\n%s\n\n" "\${1}" >> \${_logfile} 2>&1
	return
}
function _end_run {
	local _green="\\\033[1;32m"
	local _normal="\\\033[0;39m"
	printf "\${_green}%s\${_normal}\n" "Run Complete"
	return
}
#-----------------------------------------------------------------------------
#	Functions
function is_entry_ok {
	if [ -n "\${inputfile}" -a -n "\${charmap}" -a -n "\${outputpath}" ];
	then
		true
	else
		_msg "error: Bad entry <\${inputfile}>, <\${charmap}>, <\${outputpath}>"
		false
	fi
}
#-----------------------------------------------------------------------------
#	Mainline
[ -f \${LOCALEGEN} -a -s \${LOCALEGEN} ] || exit 0;
# Remove all old locale dir and locale-archive
[ -d /usr/lib/locale ] || install -vdm 755 /usr/lib/locale
rm -rf /usr/lib/locale/* || true
_msg "Generating locales..."
while read inputfile charmap outputpath; do
	case "\${inputfile}" in
		\#*) continue ;;
		"") continue ;;
	esac
	is_entry_ok || continue
	_msg_line "	\${outputpath}: "
	case "\${outputpath}" in
		C.UTF-8)	localedef -c -i "\${inputfile}" -f "\${charmap}" -A /usr/share/locale/locale.alias "\${outputpath}" 2> /dev/null || true ;;
		ja_JP.SIJS)	localedef -c -i "\${inputfile}" -f "\${charmap}" -A /usr/share/locale/locale.alias "\${outputpath}" 2> /dev/null || true ;;
		*)		localedef -c -i "\${inputfile}" -f "\${charmap}" -A /usr/share/locale/locale.alias "\${outputpath}" || true ;;
	esac
	_msg_success
done < "\${LOCALEGEN}"
_end_run
EOF
chmod 754 %{buildroot}/sbin/locale-gen
cat > %{buildroot}/etc/locale-gen.conf << EOF
# Configuration file for locale-gen
#
# lists of locales that are to be generated by the locale-gen command.
#
# Each line is of the form:
#
#     #<inputfile>	<charmap>	<outputpath>
#
#	where <inputfile> is one of the locales given in /usr/share/i18n/locales
#	and <charmap> is one of the character sets listed in /usr/share/i18n/charmaps
#	and <outputpath> is tyhe name of the resulting locale
#
#  The locale-gen command will generate all the locales,
#  placing them in /usr / lib / locale.
#
#  A list of supported locales is included in this file.
#
#	localedef -i POSIX -f UTF-8 C.UTF-8 2> /dev/null || true
#	localedef [-f charmapfile] [-i inputfile] [--force] [--verbose] [--posix] [--quiet] outputpath
#
# Each line is of the form:
#<inputfile>	<charmap>	<outputpath>
POSIX		UTF-8		C.UTF-8
cs_CZ		UTF-8		cs_CZ.UTF-8
de_DE		ISO-8859-1	de_DE
de_DE@euro	ISO-8859-15	de_DE@euro
de_DE		UTF-8		de_DE.UTF-8
el_GR		ISO-8859-7	el_GR
en_GB		UTF-8		en_GB.UTF-8
en_HK		ISO-8859-1	en_HK
en_PH		ISO-8859-1	en_PH
en_US		ISO-8859-1	en_US
en_US		UTF-8		en_US.UTF-8
es_MX		ISO-8859-1	es_MX
fa_IR		UTF-8		fa_IR
fr_FR		ISO-8859-1	fr_FR
fr_FR@euro	ISO-8859-15	fr_FR@euro
fr_FR		UTF-8		fr_FR.UTF-8
it_IT			ISO-8859-1	it_IT
it_IT			UTF-8		it_IT.UTF-8
ja_JP		EUC-JP		ja_JP
ja_JP		SHIFT_JIS	ja_JP.SIJS
ja_JP		UTF-8		ja_JP.UTF-8
ru_RU		KOI8-R		ru_RU.KOI8-R
ru_RU		UTF-8		ru_RU.UTF-8
tr_TR		UTF-8		tr_TR.UTF-8
zh_CN		GB18030		zh_CN.GB18030
zh_HK		BIG5-HKSCS	zh_HK.BIG5-HKSCS
EOF
'

Files='%defattr(-,root,root)'

